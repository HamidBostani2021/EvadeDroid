class anywheresoftware.b4a.B4AThreadPool$MyThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    private final java.util.concurrent.ThreadFactory defaultFactory;

    private void <init>()
    {
        anywheresoftware.b4a.B4AThreadPool$MyThreadFactory $r0;
        java.util.concurrent.ThreadFactory $r1;

        $r0 := @this: anywheresoftware.b4a.B4AThreadPool$MyThreadFactory;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        $r0.<anywheresoftware.b4a.B4AThreadPool$MyThreadFactory: java.util.concurrent.ThreadFactory defaultFactory> = $r1;

        return;
    }

    void <init>(anywheresoftware.b4a.B4AThreadPool$MyThreadFactory)
    {
        anywheresoftware.b4a.B4AThreadPool$MyThreadFactory $r0, $r1;

        $r0 := @this: anywheresoftware.b4a.B4AThreadPool$MyThreadFactory;

        $r1 := @parameter0: anywheresoftware.b4a.B4AThreadPool$MyThreadFactory;

        specialinvoke $r0.<anywheresoftware.b4a.B4AThreadPool$MyThreadFactory: void <init>()>();

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        anywheresoftware.b4a.B4AThreadPool$MyThreadFactory $r0;
        java.lang.Runnable $r1;
        java.lang.Thread $r2;
        java.util.concurrent.ThreadFactory $r3;

        $r0 := @this: anywheresoftware.b4a.B4AThreadPool$MyThreadFactory;

        $r1 := @parameter0: java.lang.Runnable;

        $r3 = $r0.<anywheresoftware.b4a.B4AThreadPool$MyThreadFactory: java.util.concurrent.ThreadFactory defaultFactory>;

        $r2 = interfaceinvoke $r3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>($r1);

        virtualinvoke $r2.<java.lang.Thread: void setDaemon(boolean)>(1);

        return $r2;
    }
}

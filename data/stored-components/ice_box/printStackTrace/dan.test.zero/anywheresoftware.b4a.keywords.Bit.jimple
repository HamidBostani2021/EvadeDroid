public class anywheresoftware.b4a.keywords.Bit extends java.lang.Object
{

    public void <init>()
    {
        anywheresoftware.b4a.keywords.Bit $r0;

        $r0 := @this: anywheresoftware.b4a.keywords.Bit;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int And(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 & $i1;

        return $i0;
    }

    public static byte[] InputStreamToBytes(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.ByteArrayOutputStream $r1;
        byte[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <anywheresoftware.b4a.objects.streams.File: void Copy2(java.io.InputStream,java.io.OutputStream)>($r0, $r1);

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static int Not(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 ^ -1;

        return $i0;
    }

    public static int Or(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 | $i1;

        return $i0;
    }

    public static int ParseInt(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, $i0);

        return $i0;
    }

    public static int ShiftLeft(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 << $i1;

        return $i0;
    }

    public static int ShiftRight(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 >> $i1;

        return $i0;
    }

    public static java.lang.String ToBinaryString(int)
    {
        int $i0;
        java.lang.String $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        return $r0;
    }

    public static java.lang.String ToHexString(int)
    {
        int $i0;
        java.lang.String $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        return $r0;
    }

    public static java.lang.String ToOctalString(int)
    {
        int $i0;
        java.lang.String $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toOctalString(int)>($i0);

        return $r0;
    }

    public static int UnsignedShiftRight(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 >>> $i1;

        return $i0;
    }

    public static int Xor(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 ^ $i1;

        return $i0;
    }
}

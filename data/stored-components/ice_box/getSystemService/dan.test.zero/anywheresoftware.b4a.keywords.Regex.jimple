public class anywheresoftware.b4a.keywords.Regex extends java.lang.Object
{
    public static final int CASE_INSENSITIVE;
    public static final int MULTILINE;
    private static java.util.LinkedHashMap cachedPatterns;

    public void <init>()
    {
        anywheresoftware.b4a.keywords.Regex $r0;

        $r0 := @this: anywheresoftware.b4a.keywords.Regex;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean IsMatch(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <anywheresoftware.b4a.keywords.Regex: boolean IsMatch2(java.lang.String,int,java.lang.String)>($r0, 0, $r1);

        return $z0;
    }

    public static boolean IsMatch2(java.lang.String, int, java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $r2 = staticinvoke <anywheresoftware.b4a.keywords.Regex: java.util.regex.Pattern getPattern(java.lang.String,int)>($r0, $i0);

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public static anywheresoftware.b4a.keywords.Regex$MatcherWrapper Matcher(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        anywheresoftware.b4a.keywords.Regex$MatcherWrapper $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <anywheresoftware.b4a.keywords.Regex: anywheresoftware.b4a.keywords.Regex$MatcherWrapper Matcher2(java.lang.String,int,java.lang.String)>($r0, 0, $r1);

        return $r2;
    }

    public static anywheresoftware.b4a.keywords.Regex$MatcherWrapper Matcher2(java.lang.String, int, java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;
        anywheresoftware.b4a.keywords.Regex$MatcherWrapper $r2;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $r2 = new anywheresoftware.b4a.keywords.Regex$MatcherWrapper;

        specialinvoke $r2.<anywheresoftware.b4a.keywords.Regex$MatcherWrapper: void <init>()>();

        $r3 = staticinvoke <anywheresoftware.b4a.keywords.Regex: java.util.regex.Pattern getPattern(java.lang.String,int)>($r0, $i0);

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        virtualinvoke $r2.<anywheresoftware.b4a.keywords.Regex$MatcherWrapper: void setObject(java.lang.Object)>($r4);

        return $r2;
    }

    public static java.lang.String Replace(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r0 = staticinvoke <anywheresoftware.b4a.keywords.Regex: java.lang.String Replace2(java.lang.String,int,java.lang.String,java.lang.String)>($r0, 0, $r1, $r2);

        return $r0;
    }

    public static java.lang.String Replace2(java.lang.String, int, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        $r3 = staticinvoke <anywheresoftware.b4a.keywords.Regex: java.util.regex.Pattern getPattern(java.lang.String,int)>($r0, $i0);

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r2);

        return $r0;
    }

    public static java.lang.String[] Split(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.lang.String[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <anywheresoftware.b4a.keywords.Regex: java.lang.String[] Split2(java.lang.String,int,java.lang.String)>("-_-", 0, $r1);

        return $r2;
    }

    public static java.lang.String[] Split2(java.lang.String, int, java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;
        java.util.regex.Pattern $r2;
        java.lang.String[] $r3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $r2 = staticinvoke <anywheresoftware.b4a.keywords.Regex: java.util.regex.Pattern getPattern(java.lang.String,int)>("-_-", 0);

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r1);

        return $r3;
    }

    private static java.util.regex.Pattern getPattern(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        anywheresoftware.b4a.keywords.Regex$PatternAndOptions $r1;
        java.util.LinkedHashMap $r2;
        java.lang.Object $r3;
        java.util.regex.Pattern $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = <anywheresoftware.b4a.keywords.Regex: java.util.LinkedHashMap cachedPatterns>;

        if $r2 != null goto label1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        <anywheresoftware.b4a.keywords.Regex: java.util.LinkedHashMap cachedPatterns> = $r2;

     label1:
        $r1 = new anywheresoftware.b4a.keywords.Regex$PatternAndOptions;

        specialinvoke $r1.<anywheresoftware.b4a.keywords.Regex$PatternAndOptions: void <init>(java.lang.String,int)>("-_-", 0);

        $r2 = <anywheresoftware.b4a.keywords.Regex: java.util.LinkedHashMap cachedPatterns>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.util.regex.Pattern) $r3;

        if $r4 != null goto label4;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("-_-", 0);

        $r2 = <anywheresoftware.b4a.keywords.Regex: java.util.LinkedHashMap cachedPatterns>;

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        $r2 = <anywheresoftware.b4a.keywords.Regex: java.util.LinkedHashMap cachedPatterns>;

        $i0 = virtualinvoke $r2.<java.util.LinkedHashMap: int size()>();

        if $i0 <= 50 goto label4;

        $r2 = <anywheresoftware.b4a.keywords.Regex: java.util.LinkedHashMap cachedPatterns>;

        $r5 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        $i0 = 0;

     label2:
        if $i0 < 25 goto label3;

        return $r4;

     label3:
        interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        $i0 = $i0 + 1;

        goto label2;

     label4:
        return $r4;
    }

    public static void <clinit>()
    {
        <anywheresoftware.b4a.keywords.Regex: int MULTILINE> = 8;

        <anywheresoftware.b4a.keywords.Regex: int CASE_INSENSITIVE> = 2;

        return;
    }
}

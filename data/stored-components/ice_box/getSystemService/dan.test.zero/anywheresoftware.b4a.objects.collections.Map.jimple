public class anywheresoftware.b4a.objects.collections.Map extends anywheresoftware.b4a.AbsObjectWrapper implements anywheresoftware.b4a.BA$B4aDebuggable
{

    public void <init>()
    {
        anywheresoftware.b4a.objects.collections.Map $r0;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        specialinvoke $r0.<anywheresoftware.b4a.AbsObjectWrapper: void <init>()>();

        return;
    }

    public void Clear()
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        java.lang.Object $r1;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r2;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r2 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r1;

        virtualinvoke $r2.<anywheresoftware.b4a.objects.collections.Map$MyMap: void clear()>();

        return;
    }

    public boolean ContainsKey(java.lang.Object)
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        java.lang.Object $r1, $r2;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r3;
        boolean $z0;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r3 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r2;

        $z0 = virtualinvoke $r3.<anywheresoftware.b4a.objects.collections.Map$MyMap: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public java.lang.Object Get(java.lang.Object)
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        java.lang.Object $r1, $r2;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r3;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r3 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r2;

        $r1 = virtualinvoke $r3.<anywheresoftware.b4a.objects.collections.Map$MyMap: java.lang.Object get(java.lang.Object)>($r1);

        return $r1;
    }

    public java.lang.Object GetDefault(java.lang.Object, java.lang.Object)
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        java.lang.Object $r1, $r2, $r3;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r4;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r4 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r3;

        $r1 = virtualinvoke $r4.<anywheresoftware.b4a.objects.collections.Map$MyMap: java.lang.Object get(java.lang.Object)>($r1);

        if $r1 != null goto label1;

        return $r2;

     label1:
        return $r1;
    }

    public java.lang.Object GetKeyAt(int)
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        int $i0;
        java.lang.Object $r1;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r2;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r2 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r1;

        $r1 = virtualinvoke $r2.<anywheresoftware.b4a.objects.collections.Map$MyMap: java.lang.Object getKey(int)>($i0);

        return $r1;
    }

    public java.lang.Object GetValueAt(int)
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        int $i0;
        java.lang.Object $r1;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r2;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r2 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r1;

        $r1 = virtualinvoke $r2.<anywheresoftware.b4a.objects.collections.Map$MyMap: java.lang.Object getValue(int)>($i0);

        return $r1;
    }

    public void Initialize()
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r1;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 = new anywheresoftware.b4a.objects.collections.Map$MyMap;

        specialinvoke $r1.<anywheresoftware.b4a.objects.collections.Map$MyMap: void <init>()>();

        virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: void setObject(java.lang.Object)>($r1);

        return;
    }

    public anywheresoftware.b4a.BA$IterableList Keys()
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        anywheresoftware.b4a.objects.collections.Map$1 $r1;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 = new anywheresoftware.b4a.objects.collections.Map$1;

        specialinvoke $r1.<anywheresoftware.b4a.objects.collections.Map$1: void <init>(anywheresoftware.b4a.objects.collections.Map)>($r0);

        return $r1;
    }

    public java.lang.Object Put(java.lang.Object, java.lang.Object)
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        java.lang.Object $r1, $r2, $r3;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r4;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r4 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r3;

        $r1 = virtualinvoke $r4.<anywheresoftware.b4a.objects.collections.Map$MyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r1;
    }

    public java.lang.Object Remove(java.lang.Object)
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        java.lang.Object $r1, $r2;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r3;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r3 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r2;

        $r1 = virtualinvoke $r3.<anywheresoftware.b4a.objects.collections.Map$MyMap: java.lang.Object remove(java.lang.Object)>($r1);

        return $r1;
    }

    public anywheresoftware.b4a.BA$IterableList Values()
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        anywheresoftware.b4a.objects.collections.Map$2 $r1;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 = new anywheresoftware.b4a.objects.collections.Map$2;

        specialinvoke $r1.<anywheresoftware.b4a.objects.collections.Map$2: void <init>(anywheresoftware.b4a.objects.collections.Map)>($r0);

        return $r1;
    }

    public java.lang.Object[] debug(int, boolean[])
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        int $i0, $i1;
        boolean[] $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r5;
        java.util.Set $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.util.Map$Entry $r8;
        java.lang.String $r9;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $i0 := @parameter0: int;

        $r1 := @parameter1: boolean[];

        $i1 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: int getSize()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $i0 = $i0 + 1;

        $i0 = $i0 * 2;

        $r2 = newarray (java.lang.Object)[$i0];

        $r2[0] = "Size";

        $i0 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: int getSize()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[1] = $r3;

        $i0 = 2;

        $r4 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r5 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r4;

        $r6 = virtualinvoke $r5.<anywheresoftware.b4a.objects.collections.Map$MyMap: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

     label2:
        $r1[0] = 0;

        return $r2;

     label3:
        $r4 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r4;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label2;

        $r4 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r2[$i0] = $r9;

        $r4 = $r2[$i0];

        $r9 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

        $r2[$i0] = "(empty string)";

     label4:
        $i1 = $i0 + 1;

        $r4 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r2[$i1] = $r4;

        $i0 = $i0 + 2;

        goto label1;
    }

    public int getSize()
    {
        anywheresoftware.b4a.objects.collections.Map $r0;
        java.lang.Object $r1;
        anywheresoftware.b4a.objects.collections.Map$MyMap $r2;
        int $i0;

        $r0 := @this: anywheresoftware.b4a.objects.collections.Map;

        $r1 = virtualinvoke $r0.<anywheresoftware.b4a.objects.collections.Map: java.lang.Object getObject()>();

        $r2 = (anywheresoftware.b4a.objects.collections.Map$MyMap) $r1;

        $i0 = virtualinvoke $r2.<anywheresoftware.b4a.objects.collections.Map$MyMap: int size()>();

        return $i0;
    }
}

public class com.seattleclouds.modules.nativetetris.k extends com.seattleclouds.modules.nativetetris.a
{

    public void <init>()
    {
        com.seattleclouds.modules.nativetetris.k $r0;
        android.graphics.Point $r1;
        int $i0;

        $r0 := @this: com.seattleclouds.modules.nativetetris.k;

        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.a: void <init>()>();

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point a>;

        $i0 = $r1.<android.graphics.Point: int y>;

        $i0 = $i0 + -1;

        $r1.<android.graphics.Point: int y> = $i0;

        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.k: void d()>();

        return;
    }

    private void d()
    {
        com.seattleclouds.modules.nativetetris.k $r0;
        android.graphics.Point[] $r1;
        android.graphics.Point $r2;
        com.seattleclouds.modules.nativetetris.BlockObject$BlockState $r3;

        $r0 := @this: com.seattleclouds.modules.nativetetris.k;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(0, 1);

        $r1[0] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(0, 2);

        $r1[1] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(0, 3);

        $r1[2] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(1, 2);

        $r1[3] = $r2;

        $r3 = <com.seattleclouds.modules.nativetetris.BlockObject$BlockState: com.seattleclouds.modules.nativetetris.BlockObject$BlockState STATE_0>;

        $r0.<com.seattleclouds.modules.nativetetris.k: com.seattleclouds.modules.nativetetris.BlockObject$BlockState c> = $r3;

        return;
    }

    private void e()
    {
        com.seattleclouds.modules.nativetetris.k $r0;
        android.graphics.Point[] $r1;
        android.graphics.Point $r2;
        com.seattleclouds.modules.nativetetris.BlockObject$BlockState $r3;

        $r0 := @this: com.seattleclouds.modules.nativetetris.k;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(0, 2);

        $r1[0] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(1, 2);

        $r1[1] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(1, 3);

        $r1[2] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(2, 2);

        $r1[3] = $r2;

        $r3 = <com.seattleclouds.modules.nativetetris.BlockObject$BlockState: com.seattleclouds.modules.nativetetris.BlockObject$BlockState STATE_90>;

        $r0.<com.seattleclouds.modules.nativetetris.k: com.seattleclouds.modules.nativetetris.BlockObject$BlockState c> = $r3;

        return;
    }

    private void f()
    {
        com.seattleclouds.modules.nativetetris.k $r0;
        android.graphics.Point[] $r1;
        android.graphics.Point $r2;
        com.seattleclouds.modules.nativetetris.BlockObject$BlockState $r3;

        $r0 := @this: com.seattleclouds.modules.nativetetris.k;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(0, 2);

        $r1[0] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(1, 1);

        $r1[1] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(1, 2);

        $r1[2] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(1, 3);

        $r1[3] = $r2;

        $r3 = <com.seattleclouds.modules.nativetetris.BlockObject$BlockState: com.seattleclouds.modules.nativetetris.BlockObject$BlockState STATE_180>;

        $r0.<com.seattleclouds.modules.nativetetris.k: com.seattleclouds.modules.nativetetris.BlockObject$BlockState c> = $r3;

        return;
    }

    private void g()
    {
        com.seattleclouds.modules.nativetetris.k $r0;
        android.graphics.Point[] $r1;
        android.graphics.Point $r2;
        com.seattleclouds.modules.nativetetris.BlockObject$BlockState $r3;

        $r0 := @this: com.seattleclouds.modules.nativetetris.k;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(0, 3);

        $r1[0] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(1, 2);

        $r1[1] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(1, 3);

        $r1[2] = $r2;

        $r1 = $r0.<com.seattleclouds.modules.nativetetris.k: android.graphics.Point[] b>;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>(int,int)>(2, 3);

        $r1[3] = $r2;

        $r3 = <com.seattleclouds.modules.nativetetris.BlockObject$BlockState: com.seattleclouds.modules.nativetetris.BlockObject$BlockState STATE_270>;

        $r0.<com.seattleclouds.modules.nativetetris.k: com.seattleclouds.modules.nativetetris.BlockObject$BlockState c> = $r3;

        return;
    }

    void a(com.seattleclouds.modules.nativetetris.BlockObject$RotateDirection)
    {
        com.seattleclouds.modules.nativetetris.k $r0;
        com.seattleclouds.modules.nativetetris.BlockObject$RotateDirection $r1, $r2;
        int[] $r3;
        com.seattleclouds.modules.nativetetris.BlockObject$BlockState $r4;
        int $i0;

        $r0 := @this: com.seattleclouds.modules.nativetetris.k;

        $r1 := @parameter0: com.seattleclouds.modules.nativetetris.BlockObject$RotateDirection;

        $r2 = <com.seattleclouds.modules.nativetetris.BlockObject$RotateDirection: com.seattleclouds.modules.nativetetris.BlockObject$RotateDirection CLOCKWISE>;

        if $r1 != $r2 goto label06;

        $r3 = <com.seattleclouds.modules.nativetetris.l: int[] a>;

        $r4 = $r0.<com.seattleclouds.modules.nativetetris.k: com.seattleclouds.modules.nativetetris.BlockObject$BlockState c>;

        $i0 = virtualinvoke $r4.<com.seattleclouds.modules.nativetetris.BlockObject$BlockState: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            default: goto label01;
        };

     label01:
        return;

     label02:
        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.k: void e()>();

        return;

     label03:
        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.k: void f()>();

        return;

     label04:
        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.k: void g()>();

        return;

     label05:
        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.k: void d()>();

        return;

     label06:
        $r3 = <com.seattleclouds.modules.nativetetris.l: int[] a>;

        $r4 = $r0.<com.seattleclouds.modules.nativetetris.k: com.seattleclouds.modules.nativetetris.BlockObject$BlockState c>;

        $i0 = virtualinvoke $r4.<com.seattleclouds.modules.nativetetris.BlockObject$BlockState: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label11;
            default: goto label07;
        };

     label07:
        return;

     label08:
        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.k: void g()>();

        return;

     label09:
        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.k: void d()>();

        return;

     label10:
        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.k: void e()>();

        return;

     label11:
        specialinvoke $r0.<com.seattleclouds.modules.nativetetris.k: void f()>();

        return;
    }

    int c()
    {
        com.seattleclouds.modules.nativetetris.k $r0;
        int $i0;
        int[] $r1;
        com.seattleclouds.modules.nativetetris.BlockObject$BlockState $r2;

        $r0 := @this: com.seattleclouds.modules.nativetetris.k;

        $r1 = <com.seattleclouds.modules.nativetetris.l: int[] a>;

        $r2 = $r0.<com.seattleclouds.modules.nativetetris.k: com.seattleclouds.modules.nativetetris.BlockObject$BlockState c>;

        $i0 = virtualinvoke $r2.<com.seattleclouds.modules.nativetetris.BlockObject$BlockState: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label2;
            default: goto label1;
        };

     label1:
        return 2;

     label2:
        return 3;
    }
}
